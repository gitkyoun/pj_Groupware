<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="notice">
	<insert id="insertNotice" parameterType="com.sp.notice.Notice">
		INSERT INTO notice(num, notice, memberNum, name, subject, content, saveFilename, originalFilename)
			VALUES(notice_seq.nextval, #{notice}, #{memberNum}, #{name}, #{subject}, #{content},
			#{saveFilename, jdbcType=VARCHAR},#{originalFilename, jdbcType=VARCHAR})
	</insert>
	
	<sql id="where-list">
		<if test="searchKey=='subject'">
	        INSTR(subject, #{searchValue}) &gt; 0
	   	</if>
	   
	   	<if test="searchKey=='name'">
	        INSTR(n.name, #{searchValue}) &gt; 0
	   	</if>
	   
	   	<if test="searchKey=='content'">
	        DBMS_LOB.INSTR(content, #{searchValue}) &gt; 0
	  	</if>
	   
	   	<if test="searchKey=='created'">
	        (TO_CHAR(n.created, 'YYYY-MM-DD') = #{searchValue}
	          OR TO_CHAR(n.created, 'YYYYMMDD') = #{searchValue})
	   	</if>
	</sql>
	
	<select id="noticeCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM notice n
			JOIN member m ON n.memberNum = m.memberNum
		<where>
			<if test="searchValue != null and searchValue!=''">
				<include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<!-- 공지 리스트 -->
	<select id="listNotice" parameterType="map" resultType="com.sp.notice.Notice">
		SELECT * FROM(
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT num, notice, n.memberNum, subject, n.name, n.created, hitCount
					FROM notice n
					LEFT OUTER JOIN member m ON n.memberNum = m.memberNum
				<where>
					<if test="searchValue != null and searchValue != ''">
						<include refid="where-list"/>
					</if>
				</where>
				ORDER BY notice DESC, num DESC
			) tb WHERE ROWNUM &lt;= #{end}
		)WHERE rnum &gt;= ${start}
	</select>
	
	<select id="readNotice" resultType="com.sp.notice.Notice" parameterType="Integer">
        SELECT num, n.memberNum, n.name, subject, content, n.created, hitCount, notice, n.saveFilename, n.originalFilename
           FROM notice n JOIN member m ON n.memberNum=m.memberNum 
           WHERE num = #{num}
    </select>
    
    <update id="updateHitCount" parameterType="Integer">
    	UPDATE notice SET hitCount = hitCount+1 WHERE num = #{num}
    </update>
    
    <!-- 이전글 -->
    <select id="preReadNotice" resultType="com.sp.notice.Notice" parameterType="map">
    	SELECT tb.* FROM (
			SELECT num, subject
			      FROM notice n
			      JOIN member m ON n.memberNum=m.memberNum
                    <where>
                         <if test="searchValue != null and searchValue != '' ">
			                  <include refid="where-list"/>
		                 </if>
		                 AND (num &gt; #{num})
	                </where>
				ORDER BY num ASC
		) tb WHERE ROWNUM=1
    </select>
    
    <!-- 다음글 -->
    <select id="nextReadNotice" resultType="com.sp.notice.Notice" parameterType="map">
    	SELECT tb.* FROM (
			SELECT num, subject
			      FROM notice n
			      JOIN member m ON n.memberNum=m.memberNum
                    <where>
                         <if test="searchValue != null and searchValue != '' ">
			                  <include refid="where-list"/>
		                 </if>
		                 AND (num &lt; #{num})
	                </where>
				ORDER BY num DESC
		) tb WHERE ROWNUM=1
    </select>
    
    <!-- 삭제 -->
    <delete id="deleteNotice" parameterType="Integer">
    	DELETE FROM notice WHERE num = #{num}
    </delete>
    
    <!-- 수정 -->
    <update id="updateNotice" parameterType="com.sp.notice.Notice">
    	UPDATE notice SET notice = #{notice}, subject = #{subject}, content = #{content}
    		,saveFilename=#{saveFilename, jdbcType=VARCHAR}
          	,originalFilename=#{originalFilename, jdbcType=VARCHAR} WHERE num = #{num}
    </update>
    
    <!-- 댓글 추가 -->
    <insert id="insertReply" parameterType="com.sp.notice.Reply">
    	INSERT INTO noticeReply(replyNum, num, memberNum, name, content, answer)
    		VALUES(noticeReply_seq.nextval, #{num}, #{memberNum}, #{name}, #{content}, #{answer})
    </insert>
    
    <select id="replyCount" parameterType="map" resultType="Integer">
	 		SELECT NVL(COUNT(*), 0) FROM noticeReply
	 		WHERE num=#{num} AND answer=0
	 </select>
    
    <!-- 댓글 리스트 -->
    <select id="listReply" parameterType="map" resultType="com.sp.notice.Reply">
    	SELECT * FROM(
    		SELECT ROWNUM rnum, tb.* FROM(
    			SELECT r.replyNum, r.num, r.memberNum, r.name, r.content, r.created,
    			NVL(answerCount, 0) answerCount
    				FROM noticeReply r
    				JOIN member m on r.memberNum = m.memberNum
    			LEFT OUTER JOIN(
    				SELECT answer, COUNT(*) answerCount
    				FROM noticeReply WHERE answer != 0 GROUP BY answer
    			) a ON r.replyNum = a.answer
    			WHERE num = #{num} AND r.answer = 0
    			ORDER BY r.replyNum DESC
    		) tb WHERE ROWNUM &lt;= #{end}
    	) WHERE rnum &gt;= #{start}
    </select>

	<!-- 댓글 및 답글삭제 -->
	<delete id="deleteReply" parameterType="map">
		DELETE FROM noticeReply WHERE 
		<if test="mode=='reply'">
			replyNum IN (
			     SELECT replyNum FROM noticeReply
			          START WITH replyNum=#{replyNum}
			          CONNECT BY PRIOR replyNum = answer
			)
		</if>
		<if test="mode=='answer'">
			replyNum = #{replyNum}
		</if>
	</delete>
	
	<!-- 댓글의 답글 리스트 -->
	<select id="listReplyAnswer" parameterType="Integer" resultType="com.sp.notice.Reply">
	   SELECT replyNum, num, r.memberNum, r.name, content, r.created, answer
	   FROM noticeReply r
	   JOIN member m ON r.memberNum = m.memberNum
	   WHERE answer = #{answer}
	   ORDER BY replyNum DESC
	</select>
	
	<!-- 댓글의 답글 개수 -->
	<select id="replyAnswerCount" resultType="Integer" parameterType="Integer">
	 		SELECT NVL(COUNT(*), 0)
	 		FROM noticeReply WHERE answer = #{answer}
	 </select>
	 
</mapper>