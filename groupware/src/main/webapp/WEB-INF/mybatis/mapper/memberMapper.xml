<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

<!-- 회원 정보 가져오기 -->
    <select id="readMember" resultType="com.sp.member.Member" parameterType="String">
        SELECT m.memberNum,name,pwd,zip,addr1,addr2,status,TO_CHAR(created,'YYYY-MM-DD')created,phone,email,
        	   saveFilename,originalFilename,departmentName,positionName,qualifyCode,qualifyName,serialNum,getDate
			FROM member m
			LEFT OUTER JOIN memberdetailinfo i ON m.memberNum=i.memberNum
			LEFT OUTER JOIN qualify q ON m.memberNum=q.memberNum
			LEFT OUTER JOIN department d ON m.departmentNum=d.departmentNum
			LEFT OUTER JOIN position p ON m.positionNum=p.positionNum
			 
		WHERE m.memberNum=#{memberNum}
    </select>

<!--  4개 table 모두 한번에  회원 추가 update -->
	<insert id="insertMember" parameterType="com.sp.member.Member">
		INSERT INTO member(memberNum,name,pwd,positionNum,departmentNum,saveFilename,originalFilename)
			VALUES(#{memberNum},#{name},#{pwd},#{positionNum},#{departmentNum},
			#{saveFilename},#{originalFilename})
	</insert>
	
	<insert id="insertMemberDetailinfo" parameterType="com.sp.member.Member">
		INSERT INTO memberdetailinfo(memberNum,birth,email,tel,phone,zip,addr1,addr2)
				 VALUES(#{memberNum},#{birth},#{email},#{tel},#{phone},
				 #{zip},#{addr1},#{addr2})
	</insert>
	
	<insert id="insertMemberAuthority" parameterType="com.sp.member.Member">
		INSERT INTO memberauthority(memberNum,Authority) VALUES(#{memberNum},'ROLE_USER')
	</insert>
	
	<!-- <update id="insertMember" parameterType="com.sp.member.Member">
			 INTO qualify(qualifyNum,memberNum,qualifyCode,qualifyName,serialNum,getDate)
				 VALUES(qualify_seq.NEXTVAL,#{memberNum},#{qualifyCode},#{qualifyName},#{serialNum},#{getDate})
	</update> -->
	
<!-- 사원조회 검색 조건 -->
	<sql id="where-list">
	  <if test="searchKey=='name'">
	      INSTR(name,#{searchValue})&gt;=1
	  </if>
	  <if test="searchKey=='position'">
	 	 INSTR(positionName,#{searchValue})&gt;=1
	  </if>
	  <if test="searchKey=='department'">
	      INSTR(departmanetName,#{searchValue})&gt;=1 
	  </if>
	  <if test="searchKey=='created'">
	      (TO_CHAR(created, 'YYYY-MM-DD') = #{searchValue}
            OR TO_CHAR(created, 'YYYYMMDD') = #{searchValue})
	  </if>
	</sql>
	
	<!-- AND 리스트 -->
	<sql id="and-list">
		<if test="">
			AND status=#{chk_status}
		</if>
	</sql>
	
	<!-- 총 사원 카운트 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM member m JOIN department d 
			ON m.departmentNum=d.departmentNum JOIN position p 
			ON m.positionNum=p.positionNum
		<where>
			<if test="searchValue != null and searchValue != ''">
				<include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<!-- 부서 데이터 -->
	<select id="departmentList" resultType="map">
		SELECT departmentNum,departmentName FROM department WHERE departmentType=1
	</select>
	
	<!-- 직급데이터 -->
	<select id="positionList" resultType="map">
		SELECT positionNum,positionName FROM position ORDER BY positionstep
	</select>
	
	<!-- 사원 조회 리스트 -->
	<select id="listMember" parameterType="map" resultType="com.sp.member.Member">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
			     SELECT m.memberNum,name,email,tel,phone,TO_CHAR(created,'YYYY-MM-DD')created,departmentName,positionName 
			     	FROM member m
					LEFT OUTER JOIN memberdetailInfo i ON m.memberNum=i.memberNum
					LEFT OUTER JOIN department d ON m.departmentNum = d.departmentNum 
					LEFT OUTER JOIN position p ON p.positionNum = m.positionNum
                    <where>
                         <if test="searchValue != null and searchValue != ''">
			                  <include refid="where-list"/>
		                 </if>
		                 AND m.departmentNum is NOT NULL AND p.positionNum is NOT NULL 
		           
	                </where>
					ORDER BY m.memberNum DESC
	        ) tb WHERE ROWNUM &lt;= #{end}
	    ) WHERE rnum &gt;= #{start}
	</select>
	

	 <update id="updatepwd" parameterType="com.sp.member.Member">
        UPDATE member SET userPwd=#{userPwd}, modified=SYSDATE
               WHERE memberNum=#{memberNum}
    </update>
	
	<update id="updateMember1" parameterType="com.sp.member.Member">
		UPDATE member SET name=#{name},modified=sysdate,status=#{status},
			departmentNum=#{departmentNum},positionNum=#{positionNum},saveFilename=#{saveFilename,jdbcType=VARCHAR}
			WHERE memberNum=#{memberNum}
	</update>
	
    <update id="updateMember2" parameterType="com.sp.member.Member">
        UPDATE memberdetailinfo SET email=#{email, jdbcType=VARCHAR}, 
                     tel=#{tel, jdbcType=VARCHAR}, birth=#{birth, jdbcType=VARCHAR},
                     zip=#{zip, jdbcType=VARCHAR},
                     addr1=#{addr1, jdbcType=VARCHAR}, addr2=#{addr2, jdbcType=VARCHAR}
               WHERE memberNum=#{memberNum}
    </update>
	
	
	
</mapper>